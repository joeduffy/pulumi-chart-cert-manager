// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetescertmanager.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertManagerGlobalLeaderElectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertManagerGlobalLeaderElectionArgs Empty = new CertManagerGlobalLeaderElectionArgs();

    /**
     * The duration that non-leader candidates will wait after observing a leadership renewal until attempting to acquire leadership of a led but unrenewed leader slot. This is effectively the maximum duration that a leader can be stopped before it is replaced by another candidate.
     * 
     */
    @Import(name="leaseDuration")
    private @Nullable Output<String> leaseDuration;

    /**
     * @return The duration that non-leader candidates will wait after observing a leadership renewal until attempting to acquire leadership of a led but unrenewed leader slot. This is effectively the maximum duration that a leader can be stopped before it is replaced by another candidate.
     * 
     */
    public Optional<Output<String>> leaseDuration() {
        return Optional.ofNullable(this.leaseDuration);
    }

    /**
     * Override the namespace used to store the ConfigMap for leader election.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Override the namespace used to store the ConfigMap for leader election.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The interval between attempts by the acting master to renew a leadership slot before it stops leading. This must be less than or equal to the lease duration.
     * 
     */
    @Import(name="renewDeadline")
    private @Nullable Output<String> renewDeadline;

    /**
     * @return The interval between attempts by the acting master to renew a leadership slot before it stops leading. This must be less than or equal to the lease duration.
     * 
     */
    public Optional<Output<String>> renewDeadline() {
        return Optional.ofNullable(this.renewDeadline);
    }

    private CertManagerGlobalLeaderElectionArgs() {}

    private CertManagerGlobalLeaderElectionArgs(CertManagerGlobalLeaderElectionArgs $) {
        this.leaseDuration = $.leaseDuration;
        this.namespace = $.namespace;
        this.renewDeadline = $.renewDeadline;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertManagerGlobalLeaderElectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertManagerGlobalLeaderElectionArgs $;

        public Builder() {
            $ = new CertManagerGlobalLeaderElectionArgs();
        }

        public Builder(CertManagerGlobalLeaderElectionArgs defaults) {
            $ = new CertManagerGlobalLeaderElectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param leaseDuration The duration that non-leader candidates will wait after observing a leadership renewal until attempting to acquire leadership of a led but unrenewed leader slot. This is effectively the maximum duration that a leader can be stopped before it is replaced by another candidate.
         * 
         * @return builder
         * 
         */
        public Builder leaseDuration(@Nullable Output<String> leaseDuration) {
            $.leaseDuration = leaseDuration;
            return this;
        }

        /**
         * @param leaseDuration The duration that non-leader candidates will wait after observing a leadership renewal until attempting to acquire leadership of a led but unrenewed leader slot. This is effectively the maximum duration that a leader can be stopped before it is replaced by another candidate.
         * 
         * @return builder
         * 
         */
        public Builder leaseDuration(String leaseDuration) {
            return leaseDuration(Output.of(leaseDuration));
        }

        /**
         * @param namespace Override the namespace used to store the ConfigMap for leader election.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Override the namespace used to store the ConfigMap for leader election.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param renewDeadline The interval between attempts by the acting master to renew a leadership slot before it stops leading. This must be less than or equal to the lease duration.
         * 
         * @return builder
         * 
         */
        public Builder renewDeadline(@Nullable Output<String> renewDeadline) {
            $.renewDeadline = renewDeadline;
            return this;
        }

        /**
         * @param renewDeadline The interval between attempts by the acting master to renew a leadership slot before it stops leading. This must be less than or equal to the lease duration.
         * 
         * @return builder
         * 
         */
        public Builder renewDeadline(String renewDeadline) {
            return renewDeadline(Output.of(renewDeadline));
        }

        public CertManagerGlobalLeaderElectionArgs build() {
            return $;
        }
    }

}
